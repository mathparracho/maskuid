import React, {useEffect, useState,Button, useCallback } from 'react';
import {
  View,
  ScrollView,
  StyleSheet,
  FlatList,
  SafeAreaView,
  Alert,
  RefreshControl
} from 'react-native';
import { TouchableOpacity } from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons';
import {Card, Container, BottomPost, Post, Likes, Time, TituloFeed} from '../styles/FeedStyles.js';
import * as Location from 'expo-location';

import moment from "moment";
import "moment/locale/pt-br";

import ActionButton from 'react-native-action-button';
import Icon from 'react-native-vector-icons/Ionicons';

import { useNavigation } from '@react-navigation/native';


export const HomeScreen = () => {
  const [posts, setPosts] = useState([]);
  const [location, setLocation] = useState(null);
  const [refreshing, setRefreshing] = useState(false);

  const navigation = useNavigation();

  const handleDislikes = (index) => {
    console.log(index);
  };
  const handleLike = async (index) => {
    updatedPosts = [...posts];
    console.log(updatedPosts[index]);
  };

  //get coordinates
  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== "granted") {
        Alert.alert("Permissão para a localização negada");
        return;
      }
      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    })();
  }, []);

  //fetch posts
  useEffect(() => {
    const getPosts = async () => {
      // Verificar se as coordenadas foram obtidas
      if (location) {
        const newPost = {
          lat: location.coords.latitude,
          long: location.coords.longitude,
        };

        try {
          const response = await fetch(
            //"http://192.168.0.156:3001/post/getPosts",
            "http://192.168.0.156:3001/post/getPosts",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(newPost),
            }
          );

          if (!response.ok) {
            Alert.alert("Erro ao carregar posts");
            throw new Error("Erro ao carregar posts");
          }

          const result = await response.json();
          console.log(result); // Resultado - Array de JSON
          setPosts(result);
        } catch (error) {
          console.error(error);
          Alert.alert("Erro ao carregar posts");
        }
      }
    };

    getPosts();
  }, [location]);

  const handleRefresh = useCallback(async () => {
    setRefreshing(true);

    const newPost = {
      lat: location.coords.latitude,
      long: location.coords.longitude,
    };

    try {
      const response = await fetch(
        // URL para obter os posts
        "http://192.168.0.156:3001/post/getPosts",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(newPost),
        }
      );

      if (!response.ok) {
        Alert.alert("Erro ao carregar posts");
        throw new Error("Erro ao carregar posts");
      }

      const result = await response.json();
      console.log(result); // Resultado - Array de JSON
      setPosts(result);
    } catch (error) {
      console.error(error);
      Alert.alert("Erro ao carregar posts");
    } finally {
      setRefreshing(false);
    }
  }, [location]);

  return (
    <View>
      <ScrollView
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />
        }
      >
        <Container>
          <TituloFeed>Segredos por perto:</TituloFeed>
          {posts.reverse().map((post, index) => (
            <Card key={index}>
              <Time>{moment(post.timestamp).fromNow()}</Time>
              <Post>{post.message}</Post>
              <BottomPost>
                <Likes>{post.dislikes}</Likes>
                <TouchableOpacity onPress={handleDislikes(index)}>
                  <Ionicons
                    name="heart-dislike-outline"
                    size={24}
                    color="purple"
                  />
                </TouchableOpacity>
                <TouchableOpacity onPress={handleLike(index)}>
                  <Ionicons name="heart-outline" size={24} color="purple" />
                </TouchableOpacity>
                <Likes>{post.likes}</Likes>
              </BottomPost>
            </Card>
          ))}
        </Container>
      </ScrollView>

      <ActionButton buttonColor="#53118F" size={65} offsetX={17} offsetY={50}>
        <ActionButton.Item
          buttonColor="purple"
          title="Nova Fofoca"
          onPress={() => navigation.navigate("AddPost")}
        >
          <Icon name="md-create" style={styles.actionButtonIcon} />
        </ActionButton.Item>
      </ActionButton>
    </View>
  );
}

const styles = StyleSheet.create({
  actionButtonIcon: {
    fontSize: 20,
    height: 22,
    color: 'white',
  }
});